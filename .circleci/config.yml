version: 2.1 # Use v2.1 to enable orb usage.

# The Windows orb gives you everything you
# need to start using the Windows executor.
orbs:
  win: circleci/windows@2.2.0

workflows:
  version: 2

  quality_gates:
    jobs:
      - build_and_test
      - terratest:
          context:
            # Contains Terraform service principal for dev environment
            # Will need to authenticate with Azure
            - tf-spn-dev
  deploy:
    jobs:
      - build_and_deploy:
          filters:
            branches:
              only: main
  iac_deploy_terraform:
    jobs:
      - terraform-init-plan-validate:
          context: 
            - tf-deploy-dev
            - tf-spn-dev
          filters:
            branches:
              only: main  
      - hold-terraform-apply:
          type: approval
          requires:
            - terraform-init-plan-validate
      - terraform-apply:
          context: 
            - tf-spn-dev            
          requires:
            - hold-terraform-apply

jobs:
  build_and_test: # name of your job
    description: Build & Test
    executor: win/default # executor type
    steps:
      # Commands are run in a Windows
      # virtual machine environment
      - checkout:
          path: C:\Users\circleci\project
      - run:
          name: Nuget Restore
          command: nuget restore HelloApi\HelloApi.sln
      - run:
          name: Build Debug
          command: |
            msbuild HelloApi\HelloApi.sln /p:Configuration=Debug
      - run:
          name: Run Tests
          command: |
            cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\common7\ide\extensions\TestPlatform"
            .\vstest.console.exe "C:\Users\circleci\project\HelloApi\HelloApi.Tests\bin\debug\HelloApi.Tests.dll"
  
  terratest:
    description: Run Terratest
    working_directory: ~/project
    docker:
        # Temporarily pointing at our own public Docker image
        # For any production use case, will need to figure out
        # pointing to a private registry or publishing image from
        # a more official, maintained Docker hub account
      - image: tannerbarlow/golang-latest-terraform-15.1
    steps:
      - checkout
      - run:
          name: Run Terratest Unit Tests
          command: |
            sh ./scripts/run_tf_tests.sh

  build_and_deploy: # name of your job  
    description: Build Release & Deploy
    executor: win/default # executor type

    steps:
      # Commands are run in a Windows
      # virtual machine environment
      - checkout:
          path: C:\Users\circleci\project
      - run:
          name: Nuget Restore
          command: nuget restore HelloApi\HelloApi.sln
      - run:
          name: Build Release
          command: |
            msbuild HelloApi\HelloApi.sln /p:Configuration=Release
      - run:
          name: Deploy
          command: Write-Host "Deploying..."

  terraform-init-plan-validate:
    working_directory: ~/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init
          command: |
            cd terraform
            rm -rf .terraform
            terraform init \
              -backend-config="resource_group_name=${TF_STATE_RESOURCE_GROUP}" \
              -backend-config="storage_account_name=${TF_STATE_STORAGE_ACCOUNT}" \
              -backend-config="container_name=${TF_STATE_CONTAINER_NAME}" \
              -backend-config="key=${TF_KEY}"
      - run:
          name: terraform plan
          command: |
            cd terraform
            terraform plan \
              -var "location=${REGION}" \
              -var "tags={environment="\"${ENV}"\"}" \
              -var "resource_group_name=${RESOURCE_GROUP_NAME}" \
              -var "admin_user=${ADMIN_USER}" \
              -var "admin_password=${ADMIN_PASSWORD}" \
              -var "sql_admin_user=${SQL_ADMIN_USER}" \
              -var "sql_admin_password=${SQL_ADMIN_PASSWORD}"
              -out out.tfplan
      - run:
          name: terraform validate
          command: terraform validate       
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform apply
          command: |
            cd terraform
            terraform apply out.tfplan
      - persist_to_workspace:
          root: .
          paths:
            - .